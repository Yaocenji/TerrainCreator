#version 450 core


// 一个线程跟踪一个雨滴，每个线程对应地块上每个位置
// [numthreads(32,1,1)]
layout (local_size_x = 32, local_size_y = 1) in;

// 高度场：源数据与结果数据同存
layout (binding = 0, rgba32f) uniform image2D HeightData;

// 一个预计算的高斯模糊核
//layout (binding = 1, r32f) uniform image2D GaussainDist;

// 存储流量用的buffer
//layout (binding = 2, r32f) uniform image2D WetRunOff;

// 存储随即空间的buffer

// 初始随机位置，由cpu提供
// struct pos 
// {
//     float x; float y;
// };

//layout (binding = 3, rgba32f) uniform image2D PosData;

#define PI 3.14159265358979323846

float GetHeightData(int x, int y){
    float ans = imageLoad(HeightData, ivec2(x, y)).x;
    return ans;
}
void SetHeightData(int x, int y, float value){
    imageStore(HeightData, ivec2(x, y), vec4(value, value, value, value));
}

float MyFrac(float x){
    float ans = x - float(int(x));
    return ans;
}

struct Drop
{
    vec2 pos; // 位置
    vec2 dir; // 方向
    float vel;   // 速度
    float water; // 含水量
    float sedi;  // 沉积物
};

float MyClamp(float l, float r, float value)
{
    return max(l, min(value, r));
}

float RandomFloat(float _a, float _b, float seed_x)
{
    float ans = MyFrac(sin(seed_x) * _a + _b);
    ans = MyFrac(sin(ans) * _a + _b);
    return ans;
}


uniform float time;

// 地形网格细分数：一般式1024，2048等整数
uniform int Grid;
// 地形尺寸，是正方形地形的边长的一半
uniform float Size;
// 地形最大高度，是高度系数
uniform float Height;

// 向buffer中双线性插值添加增量
void SetHeightBufferBilinear(int grid_num, float x, float y, float value)
{
    x = MyClamp(0.0, 1.0, x);
    y = MyClamp(0.0, 1.0, y);

    int xInt = int(x * float(grid_num));
    int yInt = int(y * float(grid_num));

    xInt = xInt >= grid_num ? grid_num - 1 : xInt;
    yInt = yInt >= grid_num ? grid_num - 1 : yInt;
        
    int xIntp = xInt < grid_num - 1 ? xInt + 1 : xInt;
    int yIntp = yInt < grid_num - 1 ? yInt + 1 : yInt;
        
    float u = MyFrac(x * float(grid_num));
    float v = MyFrac(y * float(grid_num));

    float Value00 = value * (1.0 - u) * (1.0 - v);
    float Value01 = value * (1.0 - u) * v;
    float Value10 = value * u * (1.0 - v);
    float Value11 = value * u * v;

    SetHeightData(xInt, yInt, GetHeightData(xInt, yInt));// + Value00);
    SetHeightData(xInt, yIntp, GetHeightData(xInt, yIntp));// + Value01);
    SetHeightData(xIntp, yInt, GetHeightData(xIntp, yInt));// + Value10);
    SetHeightData(xIntp, yIntp, GetHeightData(xIntp, yIntp));// + Value11);

    // SetHeightData(xInt, yInt, MyClamp(0.0, Height, GetHeightData(xInt, yInt)));
    // SetHeightData(xInt, yIntp, MyClamp(0.0, Height, GetHeightData(xInt, yIntp)));
    // SetHeightData(xIntp, yInt, MyClamp(0.0, Height, GetHeightData(xIntp, yInt)));
    // SetHeightData(xIntp, yIntp, MyClamp(0.0, Height, GetHeightData(xIntp, yIntp)));
}
// 从buffer中双线性插值取值
float GetHeightBufferBilinear(int grid_num, float x, float y)
{
    x = MyClamp(0.0, 1.0, x);
    y = MyClamp(0.0, 1.0, y);
        
    int xInt = int(x * grid_num);
    int yInt = int(y * grid_num);
        
    xInt = xInt >= grid_num ? grid_num - 1 : xInt;
    yInt = yInt >= grid_num ? grid_num - 1 : yInt;
        
    int xIntp = xInt < grid_num - 1 ? xInt + 1 : xInt;
    int yIntp = yInt < grid_num - 1 ? yInt + 1 : yInt;
        
    float u = MyFrac(x * grid_num);
    float v = MyFrac(y * grid_num);

    float ans;
    ans = (GetHeightData(xInt, yInt) * (1.0 - v) + GetHeightData(xInt, yIntp) * v) * (1.0 - u) 
        + (GetHeightData(xIntp, yInt) * (1.0 - v) + GetHeightData(xIntp, yIntp) * v) * u;
    return ans;
}


// void SetWetRunOffBilinear(int grid_num, float x, float y, float value)
// {
//     x = MyClamp(0.0f, 1.0f, x);
//     y = MyClamp(0.0f, 1.0f, y);

//     int xInt = (int)(x * grid_num);
//     int yInt = (int)(y * grid_num);

//     xInt = xInt >= grid_num ? grid_num - 1 : xInt;
//     yInt = yInt >= grid_num ? grid_num - 1 : yInt;
        
//     int xIntp = xInt < grid_num - 1 ? xInt + 1 : xInt;
//     int yIntp = yInt < grid_num - 1 ? yInt + 1 : yInt;
        
//     float u = frac(x * grid_num);
//     float v = frac(y * grid_num);

//     float Value00 = value * (1 - u) * (1 - v);
//     float Value01 = value * (1 - u) * v;
//     float Value10 = value * u * (1 - v);
//     float Value11 = value * u * v;

//     WetRunOff[xInt * grid_num + yInt] += Value00;
//     WetRunOff[xInt * grid_num + yIntp] += Value01;
//     WetRunOff[xIntp * grid_num + yInt] += Value10;
//     WetRunOff[xIntp * grid_num + yIntp] += Value11;

//     WetRunOff[xInt * grid_num + yInt] = MyClamp(0.0f, 10000.0f, WetRunOff[xInt * grid_num + yInt]);
//     WetRunOff[xInt * grid_num + yIntp] = MyClamp(0.0f, 10000.0f, WetRunOff[xInt * grid_num + yIntp]);
//     WetRunOff[xIntp * grid_num + yInt] = MyClamp(0.0f, 10000.0f, WetRunOff[xIntp * grid_num + yInt]);
//     WetRunOff[xIntp * grid_num + yIntp] = MyClamp(0.0f, 10000.0f, WetRunOff[xIntp * grid_num + yIntp]);
// }


// 计算梯度
vec2 CalGrad(float x, float y)
{
    // 计算梯度
    float u = MyFrac(x * Grid);
    float v = MyFrac(y * Grid);
        
    int xInt = int(x * Grid);
    int yInt = int(y * Grid);
    int xplus = xInt < Grid - 1 ? xInt + 1 : xInt;
    int yplus = yInt < Grid - 1 ? yInt + 1 : yInt;

    vec2 grad;
    grad.x = 
        (GetHeightData(xplus, yInt) - GetHeightData(xInt, yInt)) * (1.0 - v) 
        + (GetHeightData(xplus, yplus) - GetHeightData(xInt, yplus)) * v;
    grad.y = 
        (GetHeightData(xInt, yplus) - GetHeightData(xInt, yInt)) * (1.0 - u) 
        + (GetHeightData(xplus, yplus) - GetHeightData(xplus, yInt)) * u;
    grad /= Size * 2.0 / float(Grid);

    return grad;
}


// 侵蚀参数

//流水长度
uniform int water_len;

//流水惯性参数（0~1）
uniform float p_inertia;

//最小坡度
uniform float p_minSlope;

//携带容量")] 
uniform float p_capacity;

//沉积系数（0~1）"), Range(0.0f, 1.0f)]
uniform float p_deposition;
    
//侵蚀系数（0~1）"), Range(0.0f, 1.0f)]
uniform float p_erosion;
    
//重力系数（0~10）"), Range(0.0f, 10.0f)]
uniform float p_gravity;
    
//蒸发系数（0~1）"), Range(0.0f, 1.0f)]
uniform float p_evaporation;
    
//侵蚀半径（1~50）"), Range(1.0f, 50.0f)]
uniform float p_radius;

//硬度系数（0~1）"), Range(0.0f, 1.0f)]
uniform float p_hardness;
    
//初始速度（0~10）"), Range(0.0f, 10.0f)]
uniform float p_velocity;


float random(float x)
{
    float y = MyFrac(sin(x)*100000.0);
    return y;
}


void main ()
{
    // float posx = random(float(gl_GlobalInvocationID.x) / 1502.2 * time + 1502.2);
    // float posy = random(float(gl_GlobalInvocationID.x) / 4856.02 * time + 4856.02);
    // float ans = posx * posy * 256;

    // ivec2 p = ivec2(gl_GlobalInvocationID.xy);
    // vec2 pf = vec2(float(gl_GlobalInvocationID.x), float(gl_GlobalInvocationID.y)) / float(Grid);

    // float h = GetHeightBufferBilinear(Grid, pf.x, pf.y);
    // h = GetHeightData(p.x, p.y);
    // //SetHeightData(p.x, p.y, 500);
    // SetHeightBufferBilinear(Grid, pf.x, pf.y, 500);
    // return;
    
    // 计算步长
    float step = 1.0 / float(Grid);
    // 这是一次雨滴模拟
    Drop d;
    // 初始化
    // TODO 随机初始化位置
    // d.pos.x = imageLoad(PosData, ivec2(gl_GlobalInvocationID.xy)).x;
    // d.pos.y = imageLoad(PosData, ivec2(gl_GlobalInvocationID.xy)).y;
    d.pos.x = random(float(gl_GlobalInvocationID.x) / 1502.2 * time + 152.2);
    d.pos.y = random(float(gl_GlobalInvocationID.x) / 4856.02 * time + 4856.02);
    d.pos.x = MyClamp(0.0, 1.0, d.pos.x);
    d.pos.y = MyClamp(0.0, 1.0, d.pos.y);

    SetHeightData(int(d.pos.x * Grid), int(d.pos.y * Grid), 500);
    return;
/*
    d.water = 1.0;
    d.vel = p_velocity;
    d.dir.x = 0;
    d.dir.y = 0;
    d.sedi = 0.1;
    for (int path = 0; path < water_len; path++)
    {

        // SetWetRunOffBilinear(Grid, d.pos.x, d.pos.y, d.water);
        
        // 计算梯度

        vec2 grad;
        float a = 0.147761, b = 0.118318, c = 0.0947416;
        grad = CalGrad(d.pos.x, d.pos.y);

        // 速度初始化
        if (path == 0)
        {
            d.vel = p_velocity * sin(atan(length(grad)));
        }

        // 新方向
        d.dir = d.dir * p_inertia - grad * (1.0 - p_inertia);
        // 如果方向的模太小，那么随机方向
        float RandDirTheta = RandomFloat(15000.0, 56.25, d.pos.x * d.pos.y) * PI * 2.0;
        if (length(d.dir) <= p_minSlope * step)
        {
            d.dir.x = cos(RandDirTheta);
            d.dir.y = sin(RandDirTheta);
            d.dir *= step;
        }

        // 归一化
        d.dir = normalize(d.dir) * step;
        // 新位置
        vec2 newPos = d.pos + d.dir;
        int newx = int(newPos.x * Grid);
        int newy = int(newPos.y * Grid);

        // 新位置的height
        float Hnew;
        // 如果水滴离开了地形
        if (newPos.x >= 0 && newPos.x <= 1.0 && newPos.y >= 0 && newPos.y <= 1.0)
        {
            // 插值计算新高度
            Hnew = GetHeightBufferBilinear(Grid, newPos.x, newPos.y);
        }
        else
            Hnew = GetHeightBufferBilinear(Grid, d.pos.x, d.pos.y);
        float Hold = GetHeightBufferBilinear(Grid, d.pos.x, d.pos.y);
        float Hdif = Hnew - Hold ;

        // 高斯卷积核的边长
        int ConvelLen = int(p_radius) * 2 + 1;
        
        // 如果上坡
        if (Hdif > 0)
        {
            if (Hdif >= d.sedi) // 凹坑深度大于目前的沉积物质量
            {
                SetHeightBufferBilinear(Grid, d.pos.x, d.pos.y, d.sedi);
                
                // 损失所有沉积物填坑
                d.sedi = 0;
            }
            else                // 凹坑深度小于
            {
                SetHeightBufferBilinear(Grid, d.pos.x, d.pos.y,Hdif);
                // 填平
                d.sedi -= Hdif;         // 损失填坑的沉积物
            }
        }
        // 如过下坡
        else
        {
            float c = max(-Hdif, p_minSlope) * d.vel * d.water * p_capacity;
            if (d.sedi > c)
            {
                // 沉积
                float newsedi = (d.sedi - c) * p_deposition; //min((d.sedi - c) * p_deposition, -Hdif);
                d.sedi -= newsedi;
                //heightData[x, y] += (d.sedi - c) * p_deposition;
                SetHeightBufferBilinear(Grid, d.pos.x, d.pos.y,
                            newsedi);
            }
            else
            {
                // 侵蚀
                float ero = min((c - d.sedi) * p_erosion, -Hdif);

                ero *= p_hardness;
                
                d.sedi += ero;

                for (int i = -int(p_radius); i <= int(p_radius); i++)
                {
                    for (int j = -int(p_radius); j <= int(p_radius); j++)
                    {
                        // SetHeightBufferBilinear(Grid, d.pos.x + float(i) * step, d.pos.y + float(j) * step,
                        //     -ero * imageLoad(GaussainDist, ivec2((i + int(p_radius)), (j + int(p_radius))) ).x);
                        SetHeightBufferBilinear(Grid, d.pos.x + float(i) * step, d.pos.y + float(j) * step,
                            -ero * (3.0 / pow((2.0 * p_radius + 1.0), 2.0)) * (1.0 - length(vec2(i, j)) * sqrt(2.0) / (2.0 * p_radius + 1.0)));
                    }
                }
            }
        }
        // 更新速度、水量
        d.vel = max(sqrt(d.vel * d.vel - Hdif * p_gravity), p_velocity);
        d.water = d.water * (1 - p_evaporation);
        // 更新位置
        d.pos = newPos;
        // 跳出条件：
        // 1 地图外
        if (newx < 0 || newx > Grid - 1 || newy < 0 || newy > Grid - 1)
            break;
        // 2 干涸
        if (d.water <= 0.02 || path >= water_len - 1)
        {
            SetHeightBufferBilinear(Grid, d.pos.x, d.pos.y, d.sedi);
            break;
        }
    }
    */
}

